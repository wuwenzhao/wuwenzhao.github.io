<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[MySQL锁]]></title>
      <url>%2F2017%2F05%2FMySQL%E9%94%81%2F</url>
      <content type="text"><![CDATA[不同存储引擎中锁的特性如下： 行锁 表锁 页锁 MyISAM Y BDB Y Y InnoDB Y Y]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[serialVersionUID]]></title>
      <url>%2F2017%2F05%2FserialVersionUID%2F</url>
      <content type="text"><![CDATA[serialVersionUID适用于Java的序列化机制。简单来说，Java的序列化机制是通过判断类的serialVersionUID来验证版本一致性的。在进行反序列化时，JVM会把传来的字节流中的serialVersionUID与本地相应实体类的serialVersionUID进行比较，如果相同就认为是一致的，可以进行反序列化，否则就会出现序列化版本不一致的异常，即是InvalidCastException。 serialVersionUID有两种显示的生成方式： 一是默认的1L，比如：private static final long serialVersionUID = 1L; 二是根据类名、接口名、成员方法及属性等来生成一个64位的哈希字段，比如：private static final long serialVersionUID = xxxxL; 当实现java.io.Serializable接口的类没有显式地定义一个serialVersionUID变量时候，Java序列化机制会根据编译的Class自动生成一个serialVersionUID作序列化版本比较用，这种情况下，如果Class文件(类名，方法明等)没有发生变化(增加空格，换行，增加注释等等)，就算再编译多次，serialVersionUID也不会变化的。 如果我们不希望通过编译来强制划分软件版本，即实现序列化接口的实体能够兼容先前版本，就需要显式地定义一个名为serialVersionUID，类型为long的变量，不修改这个变量值的序列化实体都可以相互进行串行化和反串行化。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Maven镜像]]></title>
      <url>%2F2017%2F04%2FMaven%E9%95%9C%E5%83%8F%2F</url>
      <content type="text"><![CDATA[中央仓库 123456789101112131415&lt;!-- 中央仓库1 --&gt;&lt;mirror&gt; &lt;id&gt;repo1&lt;/id&gt; &lt;mirrorOf&gt;central&lt;/mirrorOf&gt; &lt;name&gt;Human Readable Name for this Mirror.&lt;/name&gt; &lt;url&gt;http://repo1.maven.org/maven2/&lt;/url&gt;&lt;/mirror&gt;&lt;!-- 中央仓库2 --&gt;&lt;mirror&gt; &lt;id&gt;repo2&lt;/id&gt; &lt;mirrorOf&gt;central&lt;/mirrorOf&gt; &lt;name&gt;Human Readable Name for this Mirror.&lt;/name&gt; &lt;url&gt;http://repo2.maven.org/maven2/&lt;/url&gt;&lt;/mirror&gt; 国内镜像 1234567&lt;!-- 阿里云仓库 --&gt;&lt;mirror&gt; &lt;id&gt;alimaven&lt;/id&gt; &lt;mirrorOf&gt;central&lt;/mirrorOf&gt; &lt;name&gt;aliyun maven&lt;/name&gt; &lt;url&gt;http://maven.aliyun.com/nexus/content/repositories/central/&lt;/url&gt;&lt;/mirror&gt;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[google guava笔记]]></title>
      <url>%2F2017%2F04%2Fgoogle-guava%E7%AC%94%E8%AE%B0%2F</url>
      <content type="text"><![CDATA[Maven Dependency123456&lt;!-- https://mvnrepository.com/artifact/com.google.guava/guava --&gt;&lt;dependency&gt; &lt;groupId&gt;com.google.guava&lt;/groupId&gt; &lt;artifactId&gt;guava&lt;/artifactId&gt; &lt;version&gt;21.0&lt;/version&gt;&lt;/dependency&gt; 常用方法 List to Map 1234567ImmutableMap&lt;Integer, ExpenseTypeDTO&gt; expenseTypeMap = Maps.uniqueIndex(expenseTypeDTOList, new Function&lt;ExpenseTypeDTO, Integer&gt;() &#123; @Nullable @Override public Integer apply(ExpenseTypeDTO expenseTypeDTO) &#123; return expenseTypeDTO.getId(); &#125;&#125;); List to List 1234567List&lt;Integer&gt; expenseTypeIdList = Lists.transform(expenseTypePOList, new Function&lt;ExpenseTypePO, Integer&gt;() &#123; @Nullable @Override public Integer apply(ExpenseTypePO expenseTypePO) &#123; return expenseTypePO.getId(); &#125;&#125;); List 求交集 1List&lt;String&gt; newList = ListUtils.retainAll(list1, list2);]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[MWeb]]></title>
      <url>%2F2017%2F04%2FMWeb%2F</url>
      <content type="text"><![CDATA[##MWeb官网 ##使用方法]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[hexo多说更换网易云跟贴]]></title>
      <url>%2F2017%2F03%2F%E5%A4%9A%E8%AF%B4%E6%9B%B4%E6%8D%A2%E4%BD%8D%E7%BD%91%E6%98%93%E4%BA%91%E8%B7%9F%E8%B4%B4%2F</url>
      <content type="text"><![CDATA[意料之中的突然，多说马上要停止服务；找了个替代品 网易云跟贴 接入步骤（next主题为例） 注册账户 完善站点信息，获取productKey 配置主题下面的_config.yml gentie_productKey12# Gentie productKeygentie_productKey: xxxxxxxxxxxxxxxxxxx]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[解决Error: Cannot find module './build/default/DTraceProviderBindings]]></title>
      <url>%2F2017%2F03%2F%E8%A7%A3%E5%86%B3Error-Cannot-find-module-build-default-DTraceProviderBindings%2F</url>
      <content type="text"><![CDATA[升级node v6.8.0之后发现hexo一直报这个错，虽然貌似不影响使用，但…强迫症 解决方法：121. npm uninstall hexo-cli -g2. npm install hexo-cli -g]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[MySQL笔记]]></title>
      <url>%2F2017%2F03%2FMySQL%E7%AC%94%E8%AE%B0%2F</url>
      <content type="text"><![CDATA[MySQL的update语句，set列的顺序是有关系的，后面列的计算是以前面列的结果为基础的，即从左向右评估； SQLServer的update语句，set的顺序无关，所有的更改都是基于之前取出的快照； varchar类型字段，在头或尾有空格不会影响where = 操作；即：12A（varchar) "xxx "select * from table where A="xxx"; 有效]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>%2F2017%2F03%2Fhello-world%2F</url>
      <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[hexo更换主题]]></title>
      <url>%2F2017%2F03%2Fhexo%E6%9B%B4%E6%8D%A2%E4%B8%BB%E9%A2%98%2F</url>
      <content type="text"><![CDATA[1. 克隆代码到主题文件夹1$ git clone https://github.com/iissnan/hexo-theme-next themes/next 2. 配置主题12_config.ymltheme: hexo-theme-next]]></content>
    </entry>

    
  
  
</search>
